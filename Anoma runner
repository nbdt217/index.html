<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
<title>Anoma Runner</title>
<style>
  html,body { height:100%; margin:0; background:#0c0c0c; font-family:"Segoe UI",sans-serif; }
  #gameWrap { width:480px; max-width:95vw; margin:auto; position:relative; }
  canvas { display:block; background: linear-gradient(#6FD1FF, #C1EFFF); border-radius:14px; touch-action:none; }
  #hud { position:absolute; top:10px; left:10px; display:flex; gap:12px; align-items:center; }
  .pill { background:rgba(0,0,0,.5); padding:6px 10px; border-radius:10px; color:#fff; font-weight:bold; }
  #pauseBtn { background:#ff3860; border:none; color:#fff; padding:6px 12px; border-radius:6px; cursor:pointer; }
  #startOverlay { position:absolute; inset:0; background:rgba(0,0,0,0.75); border-radius:14px; display:flex; align-items:center; justify-content:center; }
  #startPanel { background:#1d1d1d; padding:20px; border-radius:12px; color:#fff; text-align:center; max-width:90%; }
  #startPanel h1 { margin-top:0; font-size:24px; background: linear-gradient(to right, #ff3860, #ff9f1c); -webkit-background-clip:text; -webkit-text-fill-color:transparent; }
  .char-select { display:flex; justify-content:center; gap:20px; margin:14px 0; }
  .char { background:#222; padding:10px; border-radius:10px; cursor:pointer; width:100px; }
  .char.selected { border:2px solid #ff3860; }
  .char canvas { width:100%; display:block; }
  button.play { margin-top:12px; background:#4cafef; border:none; padding:10px 20px; color:#fff; font-size:16px; border-radius:8px; cursor:pointer; }
</style>
</head>
<body>
<div id="gameWrap">
  <canvas id="game" width="480" height="720"></canvas>
  <div id="hud">
    <div class="pill">Score: <span id="score">0</span></div>
    <div class="pill">Intents: <span id="coins">0</span></div>
    <div class="pill">Speed: <span id="spd">1.0</span>x</div>
    <button id="pauseBtn">Pause</button>
  </div>

  <div id="startOverlay">
    <div id="startPanel">
      <h1>ANOMA RUNNER</h1>
      <div>Choose your character:</div>
      <div class="char-select">
        <div class="char" id="shrimp">
          <canvas width="80" height="80"></canvas>
          <div>Shrimp</div>
        </div>
        <div class="char" id="mage">
          <canvas width="80" height="80"></canvas>
          <div>Red Mage</div>
        </div>
      </div>
      <button class="play" id="playBtn">Play</button>
      <div style="margin-top:10px;font-size:13px;opacity:.8">
        PC: ← → = move • ↑/Space = jump • ↓ = slide <br/>
        Mobile: swipe left/right = move • swipe up = jump • swipe down = slide
      </div>
    </div>
  </div>
</div>

<script>
(() => {
  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d');
  const W = canvas.width, H = canvas.height;

  const scoreEl = document.getElementById('score');
  const coinsEl = document.getElementById('coins');
  const spdEl = document.getElementById('spd');
  const pauseBtn = document.getElementById('pauseBtn');
  const startOverlay = document.getElementById('startOverlay');
  const playBtn = document.getElementById('playBtn');

  // Character selection
  let selectedChar = "shrimp";
  document.querySelectorAll('.char').forEach(div => {
    div.addEventListener('click', () => {
      document.querySelectorAll('.char').forEach(c=>c.classList.remove('selected'));
      div.classList.add('selected');
      selectedChar = div.id;
    });
  });
  document.getElementById('shrimp').classList.add('selected'); // default

  // Mini preview drawings
  function drawShrimp(ctx){
    ctx.fillStyle = "#ff6f61";
    ctx.beginPath(); ctx.ellipse(40,40,25,18,0,0,Math.PI*2); ctx.fill();
    ctx.fillStyle="#fff"; ctx.beginPath(); ctx.arc(52,36,5,0,Math.PI*2); ctx.fill();
    ctx.fillStyle="#000"; ctx.beginPath(); ctx.arc(52,36,2,0,Math.PI*2); ctx.fill();
  }
  function drawMage(ctx){
    ctx.fillStyle = "#ff3860";
    ctx.fillRect(30,30,20,40);
    ctx.fillStyle = "#fff";
    ctx.fillRect(32,34,6,6); ctx.fillRect(42,34,6,6);
    ctx.fillStyle = "#800000";
    ctx.beginPath(); ctx.moveTo(40,10); ctx.lineTo(60,30); ctx.lineTo(20,30); ctx.closePath(); ctx.fill();
  }
  drawShrimp(document.querySelector('#shrimp canvas').getContext('2d'));
  drawMage(document.querySelector('#mage canvas').getContext('2d'));

  // Game state
  const laneX = [W*0.25, W*0.5, W*0.75];
  const groundY = H - 100;
  let running = false, paused = false;
  let score=0, coins=0, frame=0;
  let gameSpeed=4, initSpeed=4;

  const player = { lane:1, x:laneX[1], y:groundY, vy:0, w:50, h:70, state:"run", slideTimer:0 };
  const entities = [];

  function startGame(){
    score=0; coins=0; frame=0; gameSpeed=initSpeed;
    player.lane=1; player.x=laneX[1]; player.y=groundY; player.vy=0; player.state="run"; player.h=70;
    entities.length=0;
    running=true; paused=false;
    startOverlay.style.display="none";
    loop();
  }

  function gameOver(){
    running=false;
    startOverlay.style.display="flex";
    startOverlay.querySelector("h1").textContent="Game Over";
    startOverlay.querySelector("div").textContent=`Score: ${score} • Intents: ${coins}`;
    playBtn.textContent="Play Again";
  }

  playBtn.addEventListener("click", startGame);
  pauseBtn.addEventListener("click", ()=>{ if(running){ paused=!paused; pauseBtn.textContent=paused?"Resume":"Pause"; }});

  // Controls (PC)
  const keys={};
  window.addEventListener("keydown", e=>{ keys[e.key]=true; });
  window.addEventListener("keyup", e=>{ keys[e.key]=false; });

  function laneLeft(){ if(player.lane>0) player.lane--; }
  function laneRight(){ if(player.lane<2) player.lane++; }
  function jump(){ if(player.state==="run"){ player.vy=-16; player.state="jump"; } }
  function slide(){ if(player.state==="run"){ player.state="slide"; player.h=40; player.slideTimer=25; } }

  // Controls (Mobile swipe)
  let touchStartX=0, touchStartY=0;
  canvas.addEventListener("touchstart", e=>{
    const t=e.touches[0]; touchStartX=t.clientX; touchStartY=t.clientY;
  });
  canvas.addEventListener("touchend", e=>{
    const dx = e.changedTouches[0].clientX - touchStartX;
    const dy = e.changedTouches[0].clientY - touchStartY;
    if(Math.abs(dx)>Math.abs(dy)){
      if(dx>30) laneRight(); else if(dx<-30) laneLeft();
    } else {
      if(dy<-30) jump(); else if(dy>30) slide();
    }
  });

  // Spawn
  function spawn(){
    const lane=Math.floor(Math.random()*3), r=Math.random(), x=W+80;
    if(r<0.6){ entities.push({type:"obstacle",lane,x,y:groundY,w:50,h:70}); }
    else { entities.push({type:"coin",lane,x,y:groundY-80,w:30,h:30}); }
  }

  function update(){
    frame++;
    if(keys["ArrowLeft"]) { laneLeft(); keys["ArrowLeft"]=false; }
    if(keys["ArrowRight"]) { laneRight(); keys["ArrowRight"]=false; }
    if(keys["ArrowUp"]||keys[" "]) { jump(); keys["ArrowUp"]=keys[" "]=false; }
    if(keys["ArrowDown"]) { slide(); keys["ArrowDown"]=false; }

    // physics
    player.y+=player.vy; player.vy+=1;
    if(player.y>=groundY){ player.y=groundY; player.vy=0; if(player.state==="jump") player.state="run"; }
    if(player.state==="slide"){ player.slideTimer--; if(player.slideTimer<=0){ player.state="run"; player.h=70; } }

    // smooth lane move
    player.x += (laneX[player.lane]-player.x)*0.3;

    // entities move
    for(let i=entities.length-1;i>=0;i--){
      const e=entities[i]; e.x-=gameSpeed;
      if(e.x<-50){ entities.splice(i,1); continue; }
      if(e.lane===player.lane && Math.abs(e.x-player.x)<40 && Math.abs((e.y-player.h)-(player.y-player.h))<50){
        if(e.type==="obstacle"){ gameOver(); return; }
        if(e.type==="coin"){ coins++; score+=20; entities.splice(i,1); }
      }
    }

    if(frame%70===0) spawn();
    score+=Math.floor(gameSpeed*0.5);
    if(frame%300===0) gameSpeed+=0.15;

    scoreEl.textContent=score;
    coinsEl.textContent=coins;
    spdEl.textContent=(gameSpeed/initSpeed).toFixed(2);
  }

  function render(){
    ctx.clearRect(0,0,W,H);

    // ground
    ctx.fillStyle="#444"; ctx.fillRect(0,groundY+30,W,H-groundY);
    // tracks
    ctx.strokeStyle="#666"; ctx.lineWidth=3;
    for(let i=0;i<3;i++){ ctx.beginPath(); ctx.moveTo(laneX[i],0); ctx.lineTo(laneX[i],H); ctx.stroke(); }

    // entities
    for(const e of entities){
      if(e.type==="obstacle"){ ctx.fillStyle="#8B5E3C"; ctx.fillRect(e.x-25,e.y-70,50,70); }
      else if(e.type==="coin"){
        ctx.beginPath(); ctx.arc(e.x,e.y,15,0,Math.PI*2); ctx.fillStyle="#FFD54A"; ctx.fill();
        ctx.fillStyle="#000"; ctx.font="10px Arial"; ctx.textAlign="center"; ctx.fillText("INTENTS",e.x,e.y+3);
      }
    }

    // player
    if(selectedChar==="shrimp"){ drawShrimpChar(player.x,player.y); }
    else { drawMageChar(player.x,player.y); }
  }

  function drawShrimpChar(x,y){
    ctx.save(); ctx.translate(x,y-35);
    ctx.fillStyle="#ff6f61"; ctx.beginPath(); ctx.ellipse(0,0,25,18,0,0,Math.PI*2); ctx.fill();
    ctx.fillStyle="#fff"; ctx.beginPath(); ctx.arc(12,-4,5,0,Math.PI*2); ctx.fill();
    ctx.fillStyle="#000"; ctx.beginPath(); ctx.arc(12,-4,2,0,Math.PI*2); ctx.fill();
    ctx.restore();
  }
  function drawMageChar(x,y){
    ctx.save(); ctx.translate(x,y-35);
    ctx.fillStyle="#ff3860"; ctx.fillRect(-20,-35,40,70);
    ctx.fillStyle="#fff"; ctx.fillRect(-8,-25,6,6); ctx.fillRect(2,-25,6,6);
    ctx.fillStyle="#800000"; ctx.beginPath(); ctx.moveTo(0,-60); ctx.lineTo(25,-35); ctx.lineTo(-25,-35); ctx.closePath(); ctx.fill();
    ctx.restore();
  }

  function loop(){ if(!running) return; if(!paused){ update(); render(); } requestAnimationFrame(loop); }
})();
</script>
</body>
</html>
